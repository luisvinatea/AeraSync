// Mocks generated by Mockito 5.4.6 from annotations
// in aerasync/test/home_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i2;

import 'package:aerasync/core/services/app_state.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocale_0 extends _i1.SmartFake implements _i2.Locale {
  _FakeLocale_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppState].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppState extends _i1.Mock implements _i3.AppState {
  MockAppState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Locale get locale => (super.noSuchMethod(
        Invocation.getter(#locale),
        returnValue: _FakeLocale_0(
          this,
          Invocation.getter(#locale),
        ),
      ) as _i2.Locale);

  @override
  bool get isApiHealthy => (super.noSuchMethod(
        Invocation.getter(#isApiHealthy),
        returnValue: false,
      ) as bool);

  @override
  bool get hasAgreedToDisclosure => (super.noSuchMethod(
        Invocation.getter(#hasAgreedToDisclosure),
        returnValue: false,
      ) as bool);

  @override
  bool get cookiesAccepted => (super.noSuchMethod(
        Invocation.getter(#cookiesAccepted),
        returnValue: false,
      ) as bool);

  @override
  set locale(_i2.Locale? newLocale) => super.noSuchMethod(
        Invocation.setter(
          #locale,
          newLocale,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setDisclosureAgreed(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setDisclosureAgreed,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setCookiesAccepted(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setCookiesAccepted,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setError(String? message) => super.noSuchMethod(
        Invocation.method(
          #setError,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearError() => super.noSuchMethod(
        Invocation.method(
          #clearError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setApiHealth(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setApiHealth,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<bool> checkApiHealth() => (super.noSuchMethod(
        Invocation.method(
          #checkApiHealth,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  void resetResults() => super.noSuchMethod(
        Invocation.method(
          #resetResults,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> compareAerators(Map<String, dynamic>? surveyData) =>
      (super.noSuchMethod(
        Invocation.method(
          #compareAerators,
          [surveyData],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void addListener(_i2.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i2.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
