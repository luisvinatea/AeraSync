name: CI/CD Pipeline for AeraSync

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Flutter environment
      # Pinning version ensures consistency. cache: true enables dependency caching.
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2' # Updated from 3.22.2
          channel: 'stable'
          cache: true # Cache dependencies for faster builds

      # Step 3: Verify Flutter version
      - name: Verify Flutter version
        run: flutter --version

      # Step 4: Clean the project (Good practice)
      - name: Clean project
        run: flutter clean

      # Step 5: Get dependencies (Removed risky fallback logic)
      # Ensure pubspec.yaml is correct before committing. If this fails, the workflow should fail.
      - name: Get dependencies
        run: flutter pub get

      # Step 6: Verify required assets (Good check)
      - name: Verify required assets
        run: |
          MISSING=false
          for asset in \
            web/icons/aerasync64.webp \
            web/icons/aerasync64.png \
            web/icons/aerasync180.webp \
            web/icons/aerasync180.png \
            web/icons/aerasync512.webp \
            web/icons/aerasync512.png \
            web/icons/aerasync1024.webp \
            web/icons/aerasync1024.png \
            web/icons/aerasync.webp \
            web/assets/wave.svg \
            web/manifest.json \
            web/privacy.html \
            assets/data/shrimp_respiration_salinity_temperature_weight.json \
            assets/data/o2_temp_sal_100_sat.json \
            lib/l10n/app_en.arb; do # Added a few more critical files
            if [ ! -f "$asset" ]; then
              echo "Error: Required asset/file '$asset' is missing"
              MISSING=true
            fi
          done
          if [ "$MISSING" = true ]; then exit 1; fi

      # Step 7: Run tests (Good practice)
      - name: Run tests
        run: flutter test

      # Step 8: Generate localization files (Necessary)
      - name: Generate localization files
        run: flutter gen-l10n

      # Step 9: Check ARB File Consistency (Requires Python)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a recent Python 3 version

      - name: Check ARB Key Consistency
        run: |
          echo "Checking consistency of localization keys..."
          PYTHON_EXE="python" # GitHub Actions runner usually has python mapped to python3
          reference_file="lib/l10n/app_en.arb"
          if [ -f "$reference_file" ]; then
            # Python script to compare keys (ensure proper indentation in YAML)
            read -r -d '' PY_SCRIPT << EOM
          import json, sys, os
          mismatch = False
          ref_keys = set()
          try:
              ref_file = sys.argv[1]
              l10n_dir = os.path.dirname(ref_file)
              print(f"Reference file: {ref_file}")
              print(f"Checking directory: {l10n_dir}")
              with open(ref_file, 'r', encoding='utf-8') as f:
                  ref_keys = set(json.load(f).keys())
              print(f"Found {len(ref_keys)} keys in reference file.")

              for filename in os.listdir(l10n_dir):
                  if filename.startswith('app_') and filename.endswith('.arb') and filename != os.path.basename(ref_file):
                      file_path = os.path.join(l10n_dir, filename)
                      print(f"Checking file: {filename}")
                      try:
                          with open(file_path, 'r', encoding='utf-8') as f:
                              file_keys = set(json.load(f).keys())
                          if ref_keys != file_keys:
                              mismatch = True
                              missing_in_file = sorted(list(ref_keys - file_keys))
                              extra_in_file = sorted(list(file_keys - ref_keys))
                              print(f"ERROR: Key mismatch in {filename}")
                              if missing_in_file: print(f"  Missing keys: {missing_in_file}")
                              if extra_in_file: print(f"  Extra keys: {extra_in_file}")
                      except Exception as e:
                          print(f"ERROR processing {filename}: {e}")
                          mismatch = True # Treat parse errors as mismatch
          except Exception as e:
              print(f"Python script error: {e}")
              sys.exit(1)

          if mismatch:
              sys.exit(1)
          else:
              print("ARB key consistency check passed.")
              sys.exit(0)
          EOM
            if ! $PYTHON_EXE -c "$PY_SCRIPT" "$reference_file"; then
                echo "::error::ARB key consistency check failed."
                exit 1
            fi
          else
              echo "::warning::Reference localization file $reference_file not found. Skipping key consistency check."
          fi

      # Step 10: Build web release (Correct command and base-href)
      - name: Build web release
        run: flutter build web --dart-define=flutter.web.renderer=canvaskit --release --base-href=/AeraSync/

      # Step 11: Deploy to GitHub Pages (Uses standard action)
      # Now only runs on push events to the main branch
      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Condition added
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/web
          # Optional: Add commit message, user name/email if needed
          commit_message: "Deploy build for commit ${{ github.sha }}"
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          # Optional: Keep history or force push (use force push with caution)
          # keep_files: false # Default is false (cleans destination branch)
          # force_orphan: true # Creates a clean history each time

